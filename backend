const express = require("express");
const mongoose = require("mongoose");
const cors = require("cors");
const bodyParser = require("body-parser");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");

const app = express();
const PORT = 5000;
const SECRET_KEY = "your_secret_key";

app.use(cors());
app.use(bodyParser.json());

mongoose.connect("mongodb://localhost:27017/portfolio", {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

const UserSchema = new mongoose.Schema({
  username: String,
  email: String,
  password: String,
});

const ContactSchema = new mongoose.Schema({
  name: String,
  email: String,
  message: String,
});

const PortfolioSchema = new mongoose.Schema({
  title: String,
  description: String,
  image: String,
});

const User = mongoose.model("User", UserSchema);
const Contact = mongoose.model("Contact", ContactSchema);
const Portfolio = mongoose.model("Portfolio", PortfolioSchema);

app.post("/register", async (req, res) => {
  const { username, email, password } = req.body;
  const hashedPassword = await bcrypt.hash(password, 10);
  const user = new User({ username, email, password: hashedPassword });
  await user.save();
  res.json({ message: "User registered successfully" });
});

app.post("/login", async (req, res) => {
  const { email, password } = req.body;
  const user = await User.findOne({ email });
  if (!user || !(await bcrypt.compare(password, user.password))) {
    return res.status(400).json({ message: "Invalid credentials" });
  }
  const token = jwt.sign({ id: user._id }, SECRET_KEY);
  res.json({ token });
});

app.post("/contact", async (req, res) => {
  const { name, email, message } = req.body;
  const contact = new Contact({ name, email, message });
  await contact.save();
  res.json({ message: "Message sent successfully" });
});

app.get("/portfolio", async (req, res) => {
  const portfolioItems = await Portfolio.find();
  res.json(portfolioItems);
});

app.post("/portfolio", async (req, res) => {
  const { title, description, image } = req.body;
  const portfolioItem = new Portfolio({ title, description, image });
  await portfolioItem.save();
  res.json({ message: "Portfolio item added" });
});

app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
